import os
import logging
from datetime import datetime
import traceback
import sys
import shutil
import zipfile
import configparser
import platform
import winreg
from .telemetry_manager import TelemetryManager
import main

telemetry_override = None  # None = –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º, True = –≤–∫–ª—é—á–∏—Ç—å, False = –æ—Ç–∫–ª—é—á–∏—Ç—å

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–µ–π
TELEMETRY_OFF_FLAGS = {'-nt', '-n', '--no-telemetry'}
TELEMETRY_ON_FLAGS = {'-t', '-d', '-debugging', '--telemetry'}
for arg in sys.argv[1:]:
    if arg.lower() in TELEMETRY_OFF_FLAGS:
        telemetry_override = False
        print("[CLI] Telemetry will be DISABLED by command-line flag.")
        break
    elif arg.lower() in TELEMETRY_ON_FLAGS:
        telemetry_override = True
        print("[CLI] Telemetry will be ENABLED by command-line flag.")
        break

def is_telemetry_enabled():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–ª–∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç"""
    global telemetry_override
    if telemetry_override is not None:
        return telemetry_override
    try:
        config = configparser.ConfigParser()
        config.read('user_data//settings.ini', encoding='cp1251')
        return config.getboolean('Telemetry', 'send_on_close', fallback=True)
    except Exception as e:
        print(f"Error checking telemetry settings: {e}")
        return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

def get_windows_version():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ Windows"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø—É—Å–∫–µ Windows
        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows NT\CurrentVersion")
        product_name = winreg.QueryValueEx(key, "ProductName")[0]
        release_id = winreg.QueryValueEx(key, "DisplayVersion")[0]
        current_build = winreg.QueryValueEx(key, "CurrentBuild")[0]
        ubr = winreg.QueryValueEx(key, "UBR")[0]
        winreg.CloseKey(key)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        version_info = f"{product_name} (Build {current_build}.{ubr})"
        if release_id:
            version_info += f" {release_id}"
            
        return version_info
    except Exception:
        return f"Windows {platform.release()}"

class Logger:
    def __init__(self):
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.log_dir = os.path.join('user_data', 'logs')
        os.makedirs(self.log_dir, exist_ok=True)

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = os.getenv('USERNAME', 'unknown')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        current_datetime = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        self.log_file = os.path.join(self.log_dir, f'{username}_All_Tweaker_{main.version}_{current_datetime}.log')
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
        self.logger = logging.getLogger('AllTweaker')
        self.logger.setLevel(logging.INFO)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
        formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(message)s', 
                                    datefmt='%Y-%m-%d %H:%M:%S')
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
        file_handler = logging.FileHandler(self.log_file, encoding='utf-8')
        file_handler.setFormatter(formatter)
        self.logger.addHandler(file_handler)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setFormatter(formatter)
        self.logger.addHandler(console_handler)
        
        # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        sys.excepthook = self.handle_exception
        
        # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤
        self.logs_sent = False
        
    def send_logs_to_telegram(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ª–æ–≥–∏ –∏–∑ –ø–∞–ø–∫–∏ user_data//logs –≤ Telegram"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
            if not is_telemetry_enabled():
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∏ –ª–∏ –ª–æ–≥–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
            if self.logs_sent:
                return
                
            manager = TelemetryManager()
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
            temp_dir = os.path.join('user_data', 'temp_logs')
            os.makedirs(temp_dir, exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ logs
            for root, dirs, files in os.walk(self.log_dir):
                for file in files:
                    src_file = os.path.join(root, file)
                    dst_file = os.path.join(temp_dir, file)
                    shutil.copy2(src_file, dst_file)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username = os.getenv('USERNAME', 'unknown')
            
            # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            archive_name = f'{username}_logs_{datetime.now().strftime("%Y-%m-%d_%H-%M-%S")}.zip'
            archive_path = os.path.join('user_data', archive_name)
            
            with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for root, dirs, files in os.walk(temp_dir):
                    for file in files:
                        file_path = os.path.join(root, file)
                        arcname = os.path.relpath(file_path, temp_dir)
                        zipf.write(file_path, arcname)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤
            if 0 == 1: # –Ω–µ —Ö–æ—á—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞—Ä—Ö–∏–≤
                manager.send_telegram(archive_path)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            shutil.rmtree(temp_dir)
            os.remove(archive_path)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏
            self.logs_sent = True
            
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤: {str(e)}")
            return False

    def handle_exception(self, exc_type, exc_value, exc_traceback):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        if issubclass(exc_type, KeyboardInterrupt):
            # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            sys.__excepthook__(exc_type, exc_value, exc_traceback)
            return
            
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        self.logger.error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:", exc_info=(exc_type, exc_value, exc_traceback))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
            if not is_telemetry_enabled():
                return
                
            manager = TelemetryManager()
            error_message = f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ All Tweaker! {main.version}\n\n"
            error_message += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            error_message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: #{os.getenv('USERNAME', 'unknown')}\n\n"
            error_message += f"–¢–∏–ø –æ—à–∏–±–∫–∏: {exc_type.__name__}\n"
            error_message += f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {str(exc_value)}\n"
            error_message += "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º –ª–æ–≥–µ."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            manager.send_message(error_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
            if not self.logs_sent:
                self.send_logs_to_telegram()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {str(e)}")

    def send_error_notification(self, error_message, exc_info=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
            if not is_telemetry_enabled():
                return
                
            manager = TelemetryManager()
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            full_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ All Tweaker!\n\n"
            full_message += f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}\n\n"
            full_message += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            full_message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: #{os.getenv('USERNAME', 'unknown')}\n"
            full_message += f"üêç –í–µ—Ä—Å–∏—è All Tweaker: {main.version}\n"
            full_message += f"üìä –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: {len(os.listdir(self.log_dir))}\n"

            if exc_info:
                full_message += f"\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n{exc_info}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            manager.send_message(full_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
            if not self.logs_sent:
                self.send_logs_to_telegram()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")

    def log_error(self, message, exc_info=None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
        if exc_info:
            self.logger.error(f"{message}\n{traceback.format_exc()}")
        else:
            self.logger.error(message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        self.send_error_notification(message, exc_info)
        
    def log_tweak_execution(self, tweak_name, tweak_path):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–≤–∏–∫–∞"""
        self.logger.info(f"–ó–∞–ø—É—â–µ–Ω —Ç–≤–∏–∫: {tweak_name} (–ø—É—Ç—å: {tweak_path})")
        
    def log_settings_change(self, setting_name, old_value, new_value):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ '{setting_name}': {old_value} -> {new_value}")
        
    def log_python_error(self, error_msg, exc_info=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ Python"""
        self.logger.error(f"–û—à–∏–±–∫–∞ Python: {error_msg}", exc_info=exc_info)
        
    def log_program_start(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏ –≤ Telegram"""
        self.logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        try:
            if is_telemetry_enabled():
                from telemetry.telemetry_manager import TelemetryManager
                manager = TelemetryManager()
                
                success_message = f"üöÄ All Tweaker {main.version} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n\n"
                success_message += f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                success_message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: #{os.getenv('USERNAME', 'unknown')}\n\n"
                success_message += f"üíª –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {get_windows_version()}\n"
                success_message += f"üìä –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: {len(os.listdir(self.log_dir))}\n"

                manager.send_message(success_message)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {str(e)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –≤ Telegram —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
        if not self.logs_sent:
            self.send_logs_to_telegram()
        
    def log_program_exit(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        self.logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        # —É–¥–∞–ª—è–µ–º __pycache__ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤–æ –≤—Å–µ—Ö –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
        # for root, dirs, files in os.walk('.'):
        #     for dir in dirs:
        #         if dir == '__pycache__':
        #             shutil.rmtree(os.path.join(root, dir))